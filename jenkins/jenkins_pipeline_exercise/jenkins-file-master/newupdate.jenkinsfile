#!groovy

// 此文件以脚本式编写

// 引入共享库
@Library('jenkins-sharelibrary') _

String updateType = "${env.updateType}"
String releaseVersion = "${env.releaseVersion}"

def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def k8s = new org.devops.kubernetes()

tools.PrintMes("${updateType}","green")

//pipeline
def label = "k8s-slave-${UUID.randomUUID().toString()}"

podTemplate(label: label, containers: [
        containerTemplate(
                name: 'jnlp',
                image: 'jenkinsci/jnlp-slave:3.36-1',
                alwaysPullImage: false,
                privileged: true,
                args: '${computer.jnlpmac} ${computer.name}'),
        containerTemplate(name: 'maven', image: 'maven:3.6-jdk-8-alpine', command: 'cat', ttyEnabled: true,  privileged: true),
        containerTemplate(name: 'docker', image: 'docker:latest', command: 'cat', ttyEnabled: true,  privileged: true),
        containerTemplate(name: 'kubectl', image: 'cnych/kubectl', command: 'cat', ttyEnabled: true, privileged: true),
],
        namespace: 'kube-ops',serviceAccount: 'jenkins',automountServiceAccountToken: 'true',
        volumes: [
                hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
                hostPathVolume(mountPath: '/home/jenkins/.kube', hostPath: '/root/.kube'),
                hostPathVolume(hostPath: '/root/.m2', mountPath: '/root/.m2'),
                hostPathVolume(hostPath: '/root/tools', mountPath: '/home/jenkins/agent/tools')
        ]) {
            node(label) {
                stage("制品晋级"){
                    if (env.updateType == 'UAT -> STAG') {
                        script{
                           tools.PrintMes("UAT -> STAG","green")

                           //获取UAT文件中的images

                            response = gitlab.GetRepoFile(5,"demo-uat%2f${releaseVersion}-uat.yaml")
                            fileData = readYaml text: """${response}"""
                            uatImage = fileData["spec"]["template"]["spec"]["containers"][0]["image"]
                            tools.PrintMes("UAT IMAGES --> ${uatImage}","green")

                           //获取最新STAG环境的deployment
                            stagResponse = k8s.GetDeployment("kube-stag","httpd")
                            stagResponse = stagResponse.content

                            //获取镜像和version
                            stagfileData = readYaml text: """${stagResponse}"""
                            stagOldImage = stagfileData["spec"]["template"]["spec"]["containers"][0]["image"]
                            stagOldVersion = stagfileData["metadata"]["resourceVersion"]

                            //更新镜像和version
                            tools.PrintMes("STAG OLD IMAGES --> ${stagOldImage}","green")
                            stagResponse = stagResponse.replace(stagOldImage,uatImage)
                            stagResponse = stagResponse.replace(stagOldVersion,"")

                            //生成最新的STAG版本文件
                            //文件转换
                            base64Content = stagResponse.bytes.encodeBase64().toString()
                            //上传文件
                            try {
                                gitlab.CreateRepoFile(5,"demo-stag%2f${releaseVersion}-stag.yaml",base64Content)
                            } catch(e){
                                gitlab.UpdateRepoFile(5,"demo-stag%2f${releaseVersion}-stag.yaml",base64Content)
                            }
                        }
                    } else if (env.updateType == 'STAG -> PROD')  {
                        script{
                           tools.PrintMes("STAG -> PROD","green")

                           //获取STAG文件中的images
                            response = gitlab.GetRepoFile(5,"demo-stag%2f${releaseVersion}-stag.yaml")
                            fileData = readYaml text: """${response}"""
                            stagImage = fileData["spec"]["template"]["spec"]["containers"][0]["image"]
                            tools.PrintMes("STAG IMAGES --> ${stagImage}","green")

                           //获取最新PROD环境的deployment
                            prodResponse = k8s.GetDeployment("kube-prod","httpd")
                            prodResponse = prodResponse.content

                            //获取镜像和version
                            prodfileData = readYaml text: """${prodResponse}"""
                            prodOldImage = prodfileData["spec"]["template"]["spec"]["containers"][0]["image"]
                            prodOldVersion = prodfileData["metadata"]["resourceVersion"]

                            //更新镜像和version
                            tools.PrintMes("PROD OLD IMAGES --> ${prodOldImage}","green")
                            prodResponse = prodResponse.replace(prodOldImage,stagImage)
                            prodResponse = prodResponse.replace(prodOldVersion,"")

                            //生成最新的PROD版本文件
                            //文件转换
                            base64Content = prodResponse.bytes.encodeBase64().toString()
                            //上传文件
                            try {
                                gitlab.CreateRepoFile(5,"demo-prod%2f${releaseVersion}-prod.yaml",base64Content)
                            } catch(e){
                                gitlab.UpdateRepoFile(5,"demo-prod%2f${releaseVersion}-prod.yaml",base64Content)
                            }
                        }
                    }
                }
            }
        }