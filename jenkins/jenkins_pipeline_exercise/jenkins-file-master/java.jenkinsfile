#!groovy

// 此文件以脚本式编写

// 引入共享库
@Library('jenkins-sharelibrary') _

//func from shareibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def nexus = new org.devops.nexus()
def artifactory = new org.devops.artifactory() 
def k8s = new org.devops.kubernetes()

def runOpts
//env
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"
String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"
String artifactUrl = "${env.artifactUrl}"

if ("${runOpts}" == "GitlabPush"){
    branchName = branch - "refs/heads/"
    
    currentBuild.description = "Trigger by ${userName} ${branch}"
    gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    env.runOpts = "GitlabPush"
} else {
   userEmail = "cxs1103@163.com"
}

//pipeline
def label = "k8s-slave-${UUID.randomUUID().toString()}"

podTemplate(label: label, containers: [
        containerTemplate(
                name: 'jnlp',
                image: 'jenkinsci/jnlp-slave:3.36-1',
                alwaysPullImage: false,
                privileged: true,
                args: '${computer.jnlpmac} ${computer.name}'),
        containerTemplate(name: 'maven', image: 'maven:3.6-jdk-8-alpine', command: 'cat', ttyEnabled: true,  privileged: true),
        containerTemplate(name: 'docker', image: 'docker:latest', command: 'cat', ttyEnabled: true,  privileged: true),
        containerTemplate(name: 'kubectl', image: 'cnych/kubectl', command: 'cat', ttyEnabled: true, privileged: true),
],
        namespace: 'kube-ops',serviceAccount: 'jenkins',automountServiceAccountToken: 'true',
        volumes: [
                hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
                hostPathVolume(mountPath: '/home/jenkins/.kube', hostPath: '/root/.kube'),
                hostPathVolume(hostPath: '/root/.m2', mountPath: '/root/.m2'),
                hostPathVolume(hostPath: '/root/tools', mountPath: '/home/jenkins/agent/tools')
        ]) {
            node(label) {
               stage("GetCode"){
                        script{
                            println("branchName:${branchName}")

                            tools.PrintMes("获取代码","green")
                            checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]],
                                              doGenerateSubmoduleConfigurations: false,
                                              extensions: [],
                                              submoduleCfg: [],
                                              userRemoteConfigs: [[credentialsId: 'gitlab-auth', url: "${srcUrl}"]]])
                        }
                }
               stage("Build"){
                    container('maven') {
                        script{
                            tools.PrintMes("打包代码","green")
                            build.Build(buildType,buildShell)
                        }
                    }
                }

               // 项目检查
                stage("QA"){
                    script{
                        tools.PrintMes("搜索项目","green")
                    }
                }

                   //构建镜像
               stage("BuildImages"){
                    container('docker') {
                        script{
                            tools.PrintMes("构建上传镜像","green")
                            env.serviceName = "${JOB_NAME}".split("-")[0]

                            withCredentials([usernamePassword(credentialsId: 'harbor-auth', passwordVariable: 'password', usernameVariable: 'username')]) {

                               env.dockerImage = "harbor.mieken.cn/k8s/${serviceName}:${branchName}"
                               println("serviceName:${serviceName}")
                               println("branchName:${branchName}")
                               sh """
                                   docker login -u ${username} -p ${password} http://harbor.mieken.cn
                                   docker build -t harbor.mieken.cn/k8s/${serviceName}:${branchName} .
                                   sleep 1
                                   docker push harbor.mieken.cn/k8s/${serviceName}:${branchName}
                                   sleep 1
                                   #docker rmi harbor.mieken.cn/k8s/${serviceName}:${branchName}
                                """
                            }
                        }
                    }
               }

               //发布
               stage("Deploy"){
                        script{
                            tools.PrintMes("发布应用","green")

                            //下载版本库文件

                            releaseVersion = "${branchName}".split("-")[-1]
                            response = gitlab.GetRepoFile(5,"demo-uat%2f${releaseVersion}-uat.yaml")
                            //println(response)

                            //替换文件中内容（镜像）
                            fileData = readYaml text: """${response}"""
                            println(fileData["spec"]["template"]["spec"]["containers"][0]["image"])
                            println(fileData["metadata"]["resourceVersion"])
                            oldImage = fileData["spec"]["template"]["spec"]["containers"][0]["image"]
                            oldVersion = fileData["metadata"]["resourceVersion"]
                            oldUid = fileData["metadata"]["uid"]
                            response = response.replace(oldImage,dockerImage)
                            response = response.replace(oldVersion,"")
                            response = response.replace(oldUid,"")

                            println(response)

                            //更新gitlab文件内容
                            println("更新gitlab文件内容")
                            base64Content = response.bytes.encodeBase64().toString()
                            gitlab.UpdateRepoFile(5,"demo-uat%2f${releaseVersion}-uat.yaml",base64Content)

                            //发布kubernetes
                            println("发布kubernetes")
                            k8s.UpdateDeployment("kube-ops","httpd",response)
                        }
                }

                //接口自动化测试
                stage("InterfaceTest"){
                        script{
                            tools.PrintMes("接口测试","green")
                        }
               }
            }
        }