include:
  - project: 'cidevops/cidevops-newci-service'
    ref: master
    file: 'templates/default-pipeline.yml'

variables:
  ## 全局配置
  GIT_CLONE_PATH: ${CI_BUILDS_DIR}/builds/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_PIPELINE_ID}    
  GIT_CHECKOUT: "false"
  CACHE_DIR: "app/build/outputs/apk/release"

  ## 作业控制
  RUN_PIPELINE_BUILD:   "yes"     #是否运行构建 yes/no 
  RUN_PIPELINE_TEST:    "no"      #是否运行测试 yes/no 
  RUN_CODE_ANALYSIS:    "yes"     #是否代码扫描 yes/no 
  RUN_BUILD_IMAGE:      "no"     #是否生成镜像 yes/no
  RUN_DEPLOY_ARTIFACTS: "yes"      #是否上传制品 yes/no
  RUN_DEPLOY_K8S:       "no"     #是否发布K8S yes/no

  ## 依赖容器镜像
  BUILD_IMAGE: "ccr.ccs.tencentyun.com/cxs1103/android-sdk:v4"
  SONAR_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/sonar-scanner-cli:4
  CURL_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/curl:7.70.0
  DOCKER_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/docker:19.03.12
  KUBECTL_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/kubectl

  
  ## 构建测试参数
  MAVEN_OPTS: ""                #maven构建参数 
  GRADLE_OPTS: "-Dgradle.user.home=/home/gitlab-runner/ci-build-cache/gradle"        #gradle构建参数
  BUILD_SHELL: " gradle clean build "          #构建命令

  ## 单元测试参数
  TEST_SHELL : 'echo npm run test'       #测试命令
  JUNIT_REPORT_PATH: 'target/surefire-reports/TEST-*.xml'   #单元测试报告

  ## 代码扫描
  SONAR_SOURCE_DIR : "app/src"                                          #项目源码目录
  SONAR_SERVER_URL: "http://192.168.0.85:30003"                     #SonarQube服务器信息
  SONAR_TOKEN: "3a8cd7d1707fd10e9e3e572a491d514fd3e63652"           #Sonar Token最好在项目中定义。
  SONAR_SCAN_ARGS: "-Dsonar.sources=${SONAR_SOURCE_DIR} -Dsonar.java.binaries=app/build/intermediates/app_classes/release/ "                                               #项目扫描参数


  #构建镜像
  # CI_REGISTRY: 'registry.cn-hangzhou.aliyuncs.com'               #镜像仓库地址    
  # CI_REGISTRY_USER: 'cxs_1103'                                   #仓库用户信息
  # CI_REGISTRY_PASSWD: 'xxxxxxx'                                #仓库用户密码
  # CI_NAMESPACE: 'cxs1103'                                        #阿里云镜像站：命名空间
  # IMAGE_NAME: "$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID"  # harbor可以使用这种
  # IMAGE_NAME: "$CI_REGISTRY/$CI_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID" # 阿里云可以使用这种
  # DOCKER_FILE_PATH: "./Dockerfile"                         #Dockerfile位置


  ## 上传制品库(artifactory)
  ARTIFACTORY_URL: "http://artifactory.mieken.cn/artifactory/cidevops-android/"     #制品库地址
  ARTIFACTORY_NAME: "${CI_PROJECT_NAMESPACE}"                   #制品库名称
  ARTIFACT_PACKAGE: "apk"                                       #制品类型
  ARTIFACT_PATH: "app/build/outputs/apk/release/*.${ARTIFACT_PACKAGE}"                 #制品位置
  TARGET_FILE_PATH: "${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"   #目标制品位置(目录结构)
  TARGET_ARTIFACT_NAME: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}.${ARTIFACT_PACKAGE}"   #目标制品名称

  ## 部署应用k8s
  # APP_NAME: "$CI_PROJECT_NAME"                #应用名称 <-->deploymentName
  # CONTAINER_PORT: "80"                      #服务端口 <--> servicesPort
  # NAMESPACE: "$CI_PROJECT_NAME-$CI_PROJECT_ID-$CI_ENVIRONMENT_SLUG"             #名称空间
  # ENV_URL: "${ENV_NAME}.${CI_PROJECT_NAMESPACE}.${CI_PROJECT_NAME}.devops.com"  #IngressHosts
