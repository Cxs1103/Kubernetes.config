include:
  - project: 'cidevops/cidevops-newci-service'
    ref: master
    file: 'templates/default-pipeline.yml'

variables:
  ## 全局配置 
  GIT_CLONE_PATH: $CI_BUILDS_DIR/builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_PIPELINE_ID
  GIT_CHECKOUT: "false"
  CACHE_DIR: ["target/",".scannerwork/"]

  ## 作业控制
  RUN_PIPELINE_BUILD:   "yes"     #是否运行构建 yes/no 
  RUN_PIPELINE_TEST:    "yes"      #是否运行测试 yes/no 
  RUN_CODE_ANALYSIS:    "yes"     #是否代码扫描 yes/no 
  RUN_BUILD_IMAGE:      "yes"     #是否生成镜像 yes/no
  RUN_DEPLOY_ARTIFACTS: "no"      #是否上传制品 yes/no
  RUN_DEPLOY_K8S:       "yes"     #是否发布K8S yes/no


  ## 容器镜像
  BUILD_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/maven:3.8-jdk-8-aliyun
  SONAR_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/sonar-scanner-cli:4
  CURL_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/curl:7.70.0
  DOCKER_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/docker:19.03.12
  KUBECTL_IMAGE: registry.cn-hangzhou.aliyuncs.com/cxs1103/kubectl

  ## 构建测试参数
  MVN_OPTS: "-Dmaven.repo.local=/home/gitlab-runner/ci-build-cache/maven"
  BUILD_SHELL: 'mvn clean package  -DskipTests --settings=./settings.xml'  ##构建命令
  
  ## 单元测试参数
  TEST_SHELL : 'mvn test --settings=./settings.xml'                        ##测试命令
  JUNIT_REPORT_PATH: 'target/surefire-reports/TEST-*.xml'   ##单元测试报告

  ## 代码扫描
  SONAR_SOURCE_DIR : "src" 
  SONAR_SERVER_URL: "http://192.168.0.85:30003" 
  SONAR_TOKEN: "3a8cd7d1707fd10e9e3e572a491d514fd3e63652" 
  SONAR_SCAN_ARGS: "-Dsonar.sources=${SONAR_SOURCE_DIR} 
                   -Dsonar.java.binaries=target/classes 
                   -Dsonar.java.test.binaries=target/test-classes 
                   -Dsonar.java.surefire.report=target/surefire-reports "

  #构建镜像
  CI_REGISTRY: 'registry.cn-hangzhou.aliyuncs.com'
  CI_REGISTRY_USER: 'cxs_1103'
  # CI_REGISTRY_PASSWD: 'xxxxxxx'
  CI_NAMESPACE: 'cxs1103'  #阿里云镜像站：命名空间
  # IMAGE_NAME: "$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID"  # harbor可以使用这种
  IMAGE_NAME: "$CI_REGISTRY/$CI_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID" # 阿里云可以使用这种
  DOCKER_FILE_PATH: "./Dockerfile"

  ## 上传制品库(artifactory)
  #ARTIFACTORY_URL: "http://192.168.1.200:30082/artifactory"     #制品库地址
  #ARTIFACTORY_NAME: "${CI_PROJECT_NAMESPACE}"                   #制品库名称
  #ARTIFACT_PACKAGE: "jar"                                       #制品类型
  #ARTIFACT_PATH: "target/*.${ARTIFACT_PACKAGE}"                 #制品位置
  #TARGET_FILE_PATH: "${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}"   #目标制品位置(目录结构)
  #TARGET_ARTIFACT_NAME: "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}.${ARTIFACT_PACKAGE}"   #目标制品名称

  #部署应用k8s
  APP_NAME: "$CI_PROJECT_NAME"
  CONTAINER_PORT: 8081
  NAMESPACE: "$CI_PROJECT_NAME-$CI_PROJECT_ID-$CI_ENVIRONMENT_SLUG"
  ENV_URL: "${ENV_NAME}.${CI_PROJECT_NAMESPACE}.${CI_PROJECT_NAME}.devops.com"  #IngressHosts
